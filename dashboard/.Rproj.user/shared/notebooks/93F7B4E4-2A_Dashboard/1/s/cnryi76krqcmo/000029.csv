"0",""
"0","# Create a grid for interpolation"
"0","grid <- rast(germany, nrows = 100, ncol = 100)"
"0",""
"0","# Extract the coordinates of all cells"
"0","xy <- as.data.frame(raster::xyFromCell(grid, 1:ncell(grid)))"
"0",""
"0","# Create prediction locations as sf object"
"0","pred_locations <- st_as_sf(xy, coords = c('x', 'y'), crs = st_crs(germany))"
"0",""
"0","# Trim grid to study region"
"0","pred_locations <- st_filter(pred_locations, germany)"
"0",""
"0","# Ensure that pred_locations and no2_sf have the same CRS"
"0","pred_locations <- st_transform(pred_locations, crs = st_crs(no2_sf))"
"0",""
"0","# Create IDW interpolation using all neighbor locations"
"0","idw <- gstat::gstat(formula = NO2 ~ 1, locations = no2_sf, "
"0","                    nmax = nrow(no2_sf),  # use all the neighbors locations"
"0","                    set = list(idp = 1))  # beta = 1"
"0","# Interpolate"
"0","idw.sf <- raster::predict(idw, pred_locations)"
"1","[inverse distance weighted interpolation]
"
"0","# Convert interpolated results to a data frame and mutate to extract coordinates"
"0","idw.sf2 <- idw.sf %>%"
"0","  mutate(x = st_coordinates(idw.sf)[, 1],"
"0","         y = st_coordinates(idw.sf)[, 2],"
"0","         pred.NO2 = var1.pred)"
"0",""
"0","# Plot of interpolated data"
"0","p1 <- no2_sf %>% ggplot() + "
"0","  geom_sf() +"
"0","  geom_sf(data = idw.sf2, aes(col = pred.NO2), size = 0.5) + "
"0","  scale_color_viridis_c() + theme_bw() +"
"0","  labs(title = ""Inverse Distance Weighting"","
"0","       y = ""Latitude"","
"0","       x = ""Longitude"","
"0","       color = ""Predicted NO2"")"
"0",""
"0","#"
"0","p0 <- ggplot(data = germany) + "
"0","  geom_sf() + # First layer"
"0","  geom_sf(data = no2_sf, aes(col = NO2), size = 0.5) + "
"0","  scale_color_viridis_c() + "
"0","  theme_bw() +"
"0","  labs(title = ""NO2 per square meter"","
"0","       y = ""Latitude"","
"0","       x = ""Longitude"")"
"0","# Combine plots"
"0","grid.arrange(p0, p1, ncol = 2)"
"0",""
